{% comment %}
  Copyright 2022 Richard Dominick
{% endcomment %}
{% capture newline %}
{% endcapture %}
{% assign starts = '|--;|:-' | split: ';' %}
{% if include.markdown %}
  {% assign html = include.markdown | markdownify %}
{% else %}
  {% assign html = include.html %}
{% endif %}
{%- assign nodes = html
  | strip
  | split: '<pre><code class="language-'
-%}
{{ nodes.first }}
{%- for node in nodes offset:1 -%}
  {% assign tag = node | split: '">' | first %}
  {%- if tag == 'table' -%}
    {% assign contents = node
      | replace_first: tag, ''
      | replace_first: '">', ''
      | strip
      | split: '</code></pre>'
    %}
    {% assign data = contents.first | split: '```alignment' %}
    {% assign text = data[0] %}
    {% assign alignments = data[1] | replace: newline, '' | replace: ' ', '' | split: '' %}
    {% capture text %}{% include capturehtml.liquid text=text %}{% endcapture %}
    {% assign lines = text | strip | split: newline %}
    {% assign check_first_row = lines.first | replace: ' ', '' | slice: 0, 3 %}
    {% if starts contains check_first_row %}
      {% assign offset = 1 %}
    {% else %}
      {% assign offset = 2 %}
    {% endif %}

    {% assign cell_index = 0 %}
    <table>
      {% unless starts contains check_first_row %}
        <thead>
          <tr>
            {% assign cells = lines.first | strip | split: '|' %}
            {% for cell in cells offset:1 %}
              {% assign cleaned = cell | replace: '\', '' %}
              {% assign col_span = cell.size | minus: cleaned.size | plus: 1 %}

              {% assign alignment = alignments[cell_index] | upcase %}
              {% case alignment %}
                {% when "R" %}
                  <th colspan="{{ col_span }}" align="right">
                {% when "C" %}
                  <th colspan="{{ col_span }}" align="center">
                {% else %}
                  <th colspan="{{ col_span }}" align="left">
              {% endcase %}
                {{ cleaned | strip }}
              </th>

              {% assign cell_index = cell_index | plus: 1 %}
            {% endfor %}
          </tr>
        </thead>
      {% endunless %}
      <tbody>
        {% for row in lines offset:offset %}
          <tr>
            {% assign cells = row | strip | split: '|' %}
            {% assign col_index = 1 %}
            {% for cell in cells offset:1 %}
              {% assign cleaned = cell | replace: '\', '' %}
              {% assign col_span = cell.size | minus: cleaned.size | plus: 1 %}
              {% assign cleaned = cleaned | strip %}
              {% if cleaned == '^^' %}{% continue %}{% endif %}

              {% assign lookbelow_index = forloop.parentloop.index | plus: offset %}
              {% assign next_row_cells = lines[lookbelow_index] | replace: '\', '|' | strip | split: '|' %}
              {% assign cell_below = next_row_cells[col_index] | strip %}
              {% if cell_below == '^^' %}
                {% comment %} TODO: Support more than 2 row spans {% endcomment %}
                {% assign row_span = 2 %}
              {% else %}
                {% assign row_span = 1 %}
              {% endif %}

              {% assign alignment = alignments[cell_index] | upcase %}
              {% case alignment %}
                {% when "R" %}
                  <td colspan="{{ col_span }}" rowspan="{{ row_span }}" align="right">
                {% when "C" %}
                  <td colspan="{{ col_span }}" rowspan="{{ row_span }}" align="center">
                {% else %}
                  <td colspan="{{ col_span }}" rowspan="{{ row_span }}" align="left">
              {% endcase %}
                {{ cleaned }}
              </td>

              {% assign col_index = col_index | plus: col_span %}
              {% assign cell_index = cell_index | plus: 1 %}
            {% endfor %}
          </tr>
        {% endfor %}
      </tbody>
    </table>
    {%- for tail in contents offset:1 -%}
      {{ tail }}</code></pre>
    {%- endfor -%}
  {%-else -%}
    <pre><code class="language-{{ node }}
  {%- endif -%}
{%- endfor -%}
